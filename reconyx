#!/bin/bash

# Reconyx - Domain Recon Tool
# Author: Faria Ahmed

# ---------------- Colors ---------------- #
BOLD="\e[1m"
RESET="\e[0m"
COLORS=("\e[1;31m" "\e[1;32m" "\e[1;33m" "\e[1;34m" "\e[1;35m" "\e[1;36m")
RANDOM_COLOR=${COLORS[$RANDOM % ${#COLORS[@]}]}
 
# ---------------- Typing Effect ---------------- #
slow_print() {
    local text="$1"
    local delay="${2:-0.0015}"
    for ((i=0; i<${#text}; i++)); do
        echo -n "${text:$i:1}"
        sleep $delay
    done
    echo
}
 
# ---------------- Banner ---------------- #
banner() {
    local ascii="
    ____
   / __ \\___  _________  ____  __  ___  __
  / /_/ / _ \\/ ___/ __ \\/ __ \\/ / / / |/_/
 / _, _/  __/ /__/ /_/ / / / / /_/ />  <  
/_/ |_|\\___/\\___/\\____/_/ /_/\\__, /_/|_|  
"
    echo -e "${BOLD}${RANDOM_COLOR}"
    slow_print "$ascii" 0.0004
    echo -e "      Reconyx - Domain Recon Tool"
    echo -e "        by Faria Ahmed"
    echo -e "${RESET}"
    echo
}
 
# ---------------- Dependency Check ---------------- #
check_dependencies() {
    local deps=(curl jq subfinder assetfinder findomain chaos)
    local missing=()
 
    echo "[*] Checking dependencies ..."
 
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &>/dev/null; then
            missing+=("$dep")
        fi
    done
 
    if [ ${#missing[@]} -eq 0 ]; then
        echo "[*] All dependencies are already installed."
    else
        echo "[*] Installing missing dependencies, please wait..."
        for dep in "${missing[@]}"; do
            case $dep in
                curl|jq) sudo apt-get install -y "$dep" >/dev/null 2>&1 ;;
                subfinder) go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest >/dev/null 2>&1 ;;
                assetfinder) go install -v github.com/tomnomnom/assetfinder@latest >/dev/null 2>&1 ;;
                findomain)
                    wget -q https://github.com/findomain/findomain/releases/latest/download/findomain-linux.zip -O /tmp/findomain.zip
                    unzip -qo /tmp/findomain.zip -d /tmp
                    sudo mv /tmp/findomain /usr/local/bin/
                    rm -f /tmp/findomain.zip
                    ;;
                chaos) go install -v github.com/projectdiscovery/chaos-client/cmd/chaos@latest >/dev/null 2>&1 ;;
            esac
        done
        echo "[*] Missing dependencies installed successfully."
    fi
}
 
# ---------------- API Key Sync ---------------- #
sync_api_keys() {
    subfinder_conf="$HOME/.config/subfinder/provider-config.yaml"
    chaos_conf="$HOME/.config/chaos/config.yaml"
    findomain_conf="$HOME/.findomain/config.json"
 
    virustotal_key=""; chaos_key=""
 
    if [ -f "$subfinder_conf" ]; then
        virustotal_key=$(grep -A1 "virustotal:" "$subfinder_conf" | tail -n1 | tr -d ' -\"\t')
        chaos_key=$(grep -A1 "chaos:" "$subfinder_conf" | tail -n1 | tr -d ' -\"\t')
    fi
 
    if [ -f "$chaos_conf" ] && [ -z "$chaos_key" ]; then
        chaos_key=$(grep "key:" "$chaos_conf" | awk '{print $2}' | tr -d '"')
    fi
 
    if [ -n "$chaos_key" ]; then
        mkdir -p "$(dirname "$chaos_conf")"
        if grep -q 'key:' "$chaos_conf" 2>/dev/null; then
            sed -i "s|key:.*|key: \"$chaos_key\"|g" "$chaos_conf"
        else
            echo "key: \"$chaos_key\"" >> "$chaos_conf"
        fi
    fi
 
    echo
    echo "[*] API keys are set. For better results, add more keys in subfinder/chaos configs."
    echo
}
 
# ---------------- Subdomain Enumeration ---------------- #
enumerate_domain() {
    local domain=$1
    echo "[*] Collecting subdomains for: $domain"

    # Create folder for this domain
    mkdir -p "$domain"

    local output_file="$domain/subdomains_${domain}.txt"
    local tmp_file="$domain/all_subs.tmp"
    rm -f "$tmp_file"
 
    subfinder -silent -d "$domain" >> "$tmp_file"
    assetfinder --subs-only "$domain" >> "$tmp_file"
    findomain -t "$domain" -q >> "$tmp_file"
    curl -s "https://crt.sh/?q=%25.$domain&output=json" | jq -r '.[].name_value' 2>/dev/null | sed 's/\*\.//g' >> "$tmp_file"
 
    if [ -n "$chaos_key" ]; then
        chaos -d "$domain" -silent >> "$tmp_file" 2>/dev/null
    fi
 
    sort -u "$tmp_file" > "$output_file"
    rm "$tmp_file"
 
    if $verbose; then
        echo "[*] Subdomains found for $domain:"
        while IFS= read -r sub; do
            slow_print "$sub" 0.0008
        done < "$output_file"
    fi
 
    echo "[+] Results saved in: $output_file"
    echo "[+] Total unique subdomains found: $(wc -l < "$output_file")"
 
    if $alive_check; then
        echo "[*] Checking for alive subdomains..."
        alive_file="$domain/alive_subdomains_${domain}.txt"
        if command -v httpx &>/dev/null; then
            httpx -silent -l "$output_file" -o "$alive_file"
        else
            > "$alive_file"
            while IFS= read -r sub; do
                if curl -Is --max-time 5 "http://$sub" >/dev/null 2>&1; then
                    echo "$sub" >> "$alive_file"
                fi
            done < "$output_file"
        fi
        echo "[+] Alive subdomains saved in: $alive_file"
        echo "[+] Total alive: $(wc -l < "$alive_file")"
    fi
 
    echo
}
 
# ---------------- Usage ---------------- #
usage() {
    echo "Usage: $0 -d domain.com | -l list.txt [-v] [-a]"
    echo "  -d DOMAIN   Single target domain"
    echo "  -l FILE     File containing list of domains"
    echo "  -v          Verbose output (show subdomains live)"
    echo "  -a          Save alive subdomains to file"
    exit 1
}
 
# ---------------- Main ---------------- #
if [ $# -eq 0 ]; then
    usage
fi
 
domain=""
list_file=""
verbose=false
alive_check=false
 
while getopts ":d:l:vah" opt; do
    case $opt in
        d) domain=$OPTARG ;;
        l) list_file=$OPTARG ;;
        v) verbose=true ;;
        a) alive_check=true ;;
        h) usage ;;
        *) usage ;;
    esac
done
 
banner
check_dependencies
sync_api_keys
 
if [ -n "$domain" ]; then
    enumerate_domain "$domain"
fi
 
if [ -n "$list_file" ]; then
    while IFS= read -r line; do
        [ -n "$line" ] && enumerate_domain "$line"
    done < "$list_file"
fi
